<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lisa Hamm]]></title>
  <link href="http://lisahamm.github.io/atom.xml" rel="self"/>
  <link href="http://lisahamm.github.io/"/>
  <updated>2015-01-22T09:56:20-06:00</updated>
  <id>http://lisahamm.github.io/</id>
  <author>
    <name><![CDATA[Lisa Hamm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby's Yield Keyword]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/22/rubys-yield-keyword/"/>
    <updated>2015-01-22T09:02:13-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/22/rubys-yield-keyword</id>
    <content type="html"><![CDATA[<p>This week I have been working on solving <a href="https://projecteuler.net/">Project Euler</a> problems with Ruby. Project Euler is a website containing mathematical problems that require a computer to solve them. Many of the problems have common themes such as identifying prime numbers or Fibonacci terms. My mentor recommended placing code pertaining to these common themes in modules so the code can be reused by including the module in the problems that require it.</p>

<!--more-->


<p>One of the modules I created was for handling prime numbers. In order to do this, I had to read up on Ruby&rsquo;s &ldquo;yield&rdquo; keyword. The yield keyword invokes the block of code associated with the method in which it is being used. A simple implementation looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">three_times</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">three_times</span><span class="p">{</span><span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#produces:</span>
</span><span class='line'>
</span><span class='line'><span class="no">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="no">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="no">Hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first method I implemented in my PrimeNumber module was a simple check to see if a given number is prime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">none?</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next method I implemented was where it got interesting: a method to return all prime numbers up to any given number.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime_numbers_up_to</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span>  <span class="mi">2</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">i</span> <span class="k">if</span> <span class="n">prime?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this method, the while loop begins running with an i value equal to the first prime number, 2. If the value of i is a prime value, the yield keyword will invoke whatever block is given along with the method. Once the associated block has been executed, the method will pick up right where it left off&ndash;incrementing i. The loop will continue repeating in this fashion until the value of i becomes greater than the value of the number given as a parameter. Pretty cool!</p>

<p>Similarly, I also wrote a method to return a specific number of prime numbers. This method keeps track of the number of prime numbers it has passed to its associated block and will stop running once this number equals the number passed in as a parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime_numbers_up_to_nth_term</span><span class="p">(</span><span class="n">nth_term</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">term_counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">term_counter</span> <span class="o">&lt;</span> <span class="n">nth_term</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prime?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>      <span class="n">term_counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was able to utilize this method in Project Euler&rsquo;s Problem 7, which reads:</p>

<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?</p>

<p>In order to solve this problem, I included the PrimeNumber module in my Problem 7 file, and passed 10001 in as the argument. The associated block stores the most recently received prime number, which the method then returns.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="no">PrimeNumber</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">nth_prime_number</span><span class="p">(</span><span class="n">nth_term</span><span class="p">)</span>
</span><span class='line'>  <span class="n">term</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="no">PrimeNumber</span><span class="o">.</span><span class="n">prime_numbers_up_to_nth_term</span><span class="p">(</span><span class="n">nth_term</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">term</span> <span class="o">=</span> <span class="n">n</span><span class="p">}</span>
</span><span class='line'>  <span class="n">term</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find my Project Euler solutions on my <a href="https://github.com/lisahamm/project_euler_tdd">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Code Kata: Practice for Programmers]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/15/the-code-kata-practice-for-programmers/"/>
    <updated>2015-01-15T15:41:49-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/15/the-code-kata-practice-for-programmers</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="http://www.lisahamm.com/blog/2015/01/09/the-bowling-game-kata/">blog post</a> last week about my experience pairing with my mentor on the Bowling Game Kata. I have continued to work on this kata over the last week and now have more insight into why developers do these. The word “kata” is a Japanese word for “form.” A kata is a karate exercise that is continuously repeated with the intent of making little improvements with each repetition. This concept has been brought into the software development world and is commonly referred to as a Code Kata, which is essentially a practice session for the programmer. Just as an athlete must practice her sport and a musician must practice his instrument, a developer also needs to practice her craft. Each code kata is designed to be a short exercise of which is completed daily for two weeks. The daily practice is designed to ingrain patterns into one’s mind while honing development skills.</p>

<!--more-->


<p>I’ve discovered firsthand that a code kata is also a great way for TDD (test driven development) newbies to get a feel for the process. In this post, I’ll go through the process of completing the Bowling Game Kata in Ruby. For a complete overview of the kata, visit <a href="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Uncle Bob’s website</a>.</p>

<p>Starting with the simplest case, the first test is written for scoring a gutter game:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a gutter game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bowling_game</span> <span class="o">=</span> <span class="no">BowlingGame</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec at this point results in a failing test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span>
</span><span class='line'>   <span class="ss">NoMethodError</span><span class="p">:</span>
</span><span class='line'>     <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`roll&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a failing unit test, we can abide by Uncle Bob&rsquo;s first Law of TDD, and write code to enable this test to pass. It is also important to remember the third law of TDD, which states, &ldquo;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec now results in a passing test, so we can move on to testing the next simplest case: a game in which the player knocks down one pin per roll.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a simple game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bowling_game</span> <span class="o">=</span> <span class="no">BowlingGame</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">1</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">20</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, running this test results in a failure since the code is not currently storing a running total of pins knocked down. Adding the following code will allow this test to pass. Keep in mind, sticking to the rules of TDD requires one to only add enough code to result in a passing test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@total</span> <span class="o">+=</span> <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="vi">@total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that both of the tests are passing, it&rsquo;s time for some refactoring. Cleaning up your code and removing code smells is an important process that should be done once your original code is working. By using TDD, the functionality of our code is well documented by our tests. This means we don&rsquo;t have worry that refactoring may or may not break our program. We will know immediately if this is the case when we run our tests after making a change.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:bowling_game</span><span class="p">)</span> <span class="p">{</span><span class="no">BowlingGame</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll_many</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a gutter game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a simple game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">20</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next text case is for scoring a game with a spare in it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a game with a spare&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">29</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to score a game with a spare, we will now need a variable to keep track of the number of pins knocked down in each roll. The player will receive 10 points plus the number of pins knocked down during the first roll of the subsequent frame. Since this next step is more of a leap, I am going to refactor the current code further incorporating the spare test. For now, I will place an &lsquo;x&rsquo; at the beginning of the test, which will tell rspec to ignore it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">xit</span> <span class="s2">&quot;can score a game with a spare&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">29</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the BowlingGame class, the @total instance variable can be replaced with another instance variable, @rolls, that is set to equal an empty array. An attr_reader for this variable can also be added to the class. In the roll method, we can add the number of pins knocked down on each roll to the new rolls array. Additionally, now the score method can be refactored to actually implement the scoring.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:rolls</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">&lt;&lt;</span> <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After checking to make sure the tests pass at this point, it&rsquo;s time to bring back the spare test by removing the &lsquo;x&rsquo; placed at its beginning.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a game with a spare&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">29</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order for this test to pass, the score method needs to check if the pins knocked down in each frame total 10. A while loop can run through each frame by using an index variable to access each roll and then increment its value by 2 so as to move to the next frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:rolls</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">&lt;&lt;</span> <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rolls</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that all of our tests pass, we move on to test the case of scoring a game with a strike.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a game with a strike&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">30</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running rspec and watching this test fail, the score method is modified to account for the case of a strike - when 10 pins are knocked down on the first roll of a frame. Here, the index variable must only increment by a value of 1 in order to move to the next frame (since there is only one roll in a frame with a strike).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rolls</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec at this point will show all of our tests currently pass. Since we are in the green, it is a good point to consider refactoring the code. We can add clearly named methods to check for a strike and a spare. We can also add methods to return the bonus points a player earns when scoring both a strike and a spare, and also the sum of the points earned in a frame without a strike or spare.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rolls</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">strike?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">strike_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">spare?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">spare_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">sum_of_balls_in_frame</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strike?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">spare?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strike_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">spare_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_of_balls_in_frame</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These explicitly named methods facilitate reading and understanding of the code with ease for anyone who may try to digest it. Following this idea, the spec file can also be refactored to include methods for rolling a spare and rolling a strike.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">roll_spare</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll_strike</span>
</span><span class='line'>  <span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After completing this refactoring, it is now time to tackle the last test case: a perfect game of bowling. This consists of 12 strikes and results in a score of 300 points.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a perfect game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">12</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">roll_strike</span><span class="p">}</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">300</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec now results in the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">300</span>
</span><span class='line'><span class="ss">TypeError</span><span class="p">:</span>
</span><span class='line'>  <span class="kp">nil</span> <span class="n">can</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">be</span> <span class="n">coerced</span> <span class="n">into</span> <span class="no">Fixnum</span>
</span></code></pre></td></tr></table></div></figure>


<p>This error message is a common one&ndash;it occurs when trying to access an item of an array with an index that reaches further than the length of an array (this results in a nil value). In order to make this test pass, the score method needs a variable to keep track of the frame number. The while loop within this method needs to execute while the frame number is less than 10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">frame</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">strike?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">strike_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">spare?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">spare_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">sum_of_balls_in_frame</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the complete kata on my <a href="https://github.com/lisahamm/bowling_game_kata">github</a>. After completing this kata over and over again, I am happy to report that I can now do it in close to 10 minutes and my overall agility on the keyboard has improved immensely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Keyboard Shortcuts]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/13/useful-keyboard-shortcuts/"/>
    <updated>2015-01-13T15:41:05-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/13/useful-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>I’ve been working on improving the time it takes me to complete the Bowling Game Kata. One thing that has been helpful with this is learning keyboard shortcuts that facilitate easy movement throughout the text editor. I am currently coding in Sublime Text 2 on a MacBook. I found <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">this webpage</a> that lists several shortcuts. So far, the most useful have been:</p>

<!--more-->


<p>-<strong>Command + Option + left or right arrow key</strong> to move from one open file to the next</p>

<p>-<strong>Command + Tab</strong> which allows you to move into another application running (this makes it easy to switch between Sublime and the Terminal)</p>

<p>-<strong>Command + Enter</strong> creates a new line (and you don’t have to be at the end of the line to utilize this)</p>

<p>-<strong>Shift + left or right arrow key</strong> will select text character by character</p>

<p>-<strong>Shift + Command + right/left arrow key</strong> will select text from cursor to end of the line</p>

<p>-<strong>Command + L</strong> selects entire line</p>

<p>-<strong>Ctrl + Command + G</strong> to find and select all cases of a word/character (this is useful if you want to change the name of either a variable or a method that appears several times in your text)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Bowling Game Kata]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/09/the-bowling-game-kata/"/>
    <updated>2015-01-09T15:40:05-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/09/the-bowling-game-kata</id>
    <content type="html"><![CDATA[<p>Yesterday I sat down with my 8th Light mentor, Doug, and paired on the <a href="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Bowling Game Kata</a> and wrote it in Ruby. The general concept is to write a program capable of scoring a game of bowling and to use test driven development (TDD) in order to do so. A game of bowling is made up of 10 frames in which a player has two opportunities to knock down 10 pins. The player earns a score equal to the number of pins knocked down in each frame, but also has the opportunity to earn additional points for a spare (whatever is earned in the next roll is added to the 10 points in the frame) and a strike (points earned from the following two rolls are added to the 10 points in the frame).</p>

<!--more-->


<p>Before attempting this kata, I had tried to learn the ropes of TDD on my own, but was having a hard time getting a feel for writing tests for “the next easiest thing.” While pairing with Doug, we went over the <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">Three Rules of TDD</a> which were extremely helpful to me in clarifying the process. The first rule is not to write any production code unless it is to make a failing test pass. The second rule is not to write any more of a test than is sufficient to fail. The third rule is not to write any more production code than is necessary to pass the one failing test.</p>

<p>We started with writing a test for the simplest case of a bowling game–one in which a player rolls all gutter balls. This case would result in a score of zero. After running the test and watching it fail, we added just enough production code to make it pass. The next test was for a simple game of bowling in which a player knocks down one pin each roll. The outcome of this game would be a score of 20. Once again, we ran the test, watched it fail, and added just enough production code to make it pass. We continued along like this for the case of a spare in the first frame, a strike in the first frame, and finally for the cases of a spare and strike in the tenth frame. Along the way, we did some refactoring, but only after we confirmed all tests written up to that point were passing. After finishing the kata with Doug, I felt I had such a better grasp on how to implement TDD and also learned how awesome it is. The simplicity of the code we wrote compared to what I written on my own (without using TDD) was quite a beautiful thing.</p>

<p>After we finished, Doug deleted the program and said it would be a good idea to repeat the kata over and over until I can complete it about 10 minutes. I am a huge believer in “practice makes perfect” and also had a lot of fun with this kata, so I’m excited to keeping working on it until I can meet the 10 minute goal.</p>
]]></content>
  </entry>
  
</feed>
