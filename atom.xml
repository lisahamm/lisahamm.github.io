<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lisa Hamm]]></title>
  <link href="http://lisahamm.github.io/atom.xml" rel="self"/>
  <link href="http://lisahamm.github.io/"/>
  <updated>2017-01-27T22:58:02-06:00</updated>
  <id>http://lisahamm.github.io/</id>
  <author>
    <name><![CDATA[Lisa Hamm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Principles in the Context of Packages]]></title>
    <link href="http://lisahamm.github.io/blog/2015/05/28/design-principles-in-the-context-of-packages/"/>
    <updated>2015-05-28T21:45:59-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/05/28/design-principles-in-the-context-of-packages</id>
    <content type="html"><![CDATA[<p>Recently, I have been working my way through Uncle Bob&rsquo;s book, <a href="Agile%20Software%20Development,%20Principles,%20Patterns,%20and%20Practices">Agile Software Development, Principles, Patterns, and Practices</a>. This has resulted in spending a lot of time thinking about and exploring design principles. However, until recently, the principles I was learning applied directly to principles of class design.<!--more--> My mentor suggested I read Chapter 20 in PPP and upon doing so, I had my first exposure to the idea of package design principles. Going into the reading, I had a working knowledge of the concept of software packages, but my experience creating them was definitely lacking. Learning the principles of package design gave me some great ideas on how to organize classes in the <a href="http://www.lisahamm.com/blog/2015/05/01/starting-a-java-web-server/">project</a> I am currently developing.</p>

<h3>Package Basics</h3>

<p>Before we dive into the different package design principles, what is a package? A package is a convenient way to organize classes into groups, which can be very helpful in large projects. The principles of package design serve to define better ways of organizing classes within an application, similar to the way SOLID principles define better ways to organize methods in classes. Uncle Bob presents six different package design principles in his book. The first three principles pertain to partitioning classes into packages. The last three principles pertain to the relationships between packages. Let&rsquo;s take a closer look at each principle:</p>

<h3>Principles of Package Cohesion</h3>

<p>(1) Reuse-Release Equivalence Principle (REP)<br>
    This principle states that any package created for reuse must be released and tracked. Incorporating unmaintained packages into a project often results in a headache. When releasing a &ldquo;reusable&rdquo; package, the developer(s) must be sure to implement a tracking system and also offer support for any reusers of the package. Because of this, all classes in reusable package must be reusable. If any class is not reusable, the package in which it resides is not actually a reusable package.<br>
(2) Common-Reuse Principle (CRP)<br>
    This principle provides guidance on which classes should not be grouped together in a package. The principle essentially states if you reuse a single class from a package, you must reuse all classes in that package. There is no sense of depending on a package unless you depend on its entirety.<br>
(3) Common-Closure Principle (CCP)<br>
    This principle states changes impacting a package affect all classes within the package and no other packages. Think SRP (Single Responsibility Principle) but for packages.<br></p>

<h3>Principles of Package Coupling</h3>

<p>(4) Acyclic-Dependencies Principle (ADP)<br>
    This principle states cycles in the package-dependency graph should not be allowed. Applications should be divided into releasable packages in order to prevent changes in one part of an application from breaking components elsewhere in the application. In large scale applications, this is especially important in order to maintain stability with the application. Teams should check out the code, make changes, and then release newer versions of packages. This way, all other teams will not be affected by changes until they make the conscious decision to begin using the new release.<br>
(5) Stable-Dependencies Principle (SDP)<br>
    This principle tells us to depend in the direction of stability. Before reading this chapter, I was familiar with the concept at a class-level, but the idea also holds true within the context of package design. When following package design principles, some packages will be stable, while others will be volatile. When a package is expected to be volatile, packages that are hard to change should not be depending on it.<br>
(6) Stable-Abstractions Principle (SAP)<br>
    This principle states a package should be as abstract as it is stable. Stability within a package requires extensibility and reusability. Abstract classes lend themselves to code with these qualities. Thus, if a package is designed to be stable, it will contain abstract classes. This principle in conjunction with the Stable-Dependencies Principle can be thought of as the Dependency-Inversion Principle, but within the context of packages.<br></p>

<h3>Conclusion</h3>

<p>Package design principles are very much aligned with the SOLID design principles. These six principles help to govern the design of higher level components in an application. Reading this chapter has gotten me thinking about how to apply this in my own work. In my current HTTP server project, I have conceptually been thinking about it as three components, which I now feel could make up three respective packages within the overarching project. First, the actual server required for connecting with clients and reading/writing HTTP messages to/from sockets. Second, the middleware component responsible for manipulating data in the same way for incoming requests and outgoing responses. Third, the actual application handlers/controllers that govern the handling of specific request routes</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Middleware]]></title>
    <link href="http://lisahamm.github.io/blog/2015/05/24/exploring-middleware/"/>
    <updated>2015-05-24T11:31:07-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/05/24/exploring-middleware</id>
    <content type="html"><![CDATA[<p>Middleware is a term used to refer to software that connects various components necessary for an application. This concept can be useful for uncoupling components of an application. This post will explore the usage of middleware within a web application. Using a specific middleware to bridge the gap between an application server and an application/framework provides a layer of abstraction which allows many frameworks to easily configure with many servers.</p>

<!--more-->


<h3>Behind the scenes of sending an HTTP Request</h3>

<p>When a user opens up a browser, types in a website&rsquo;s address, and hits the enter key, there is quite a lot happening behind the scenes in order for the requested website to appear on the user&rsquo;s computer. First, when the user enters a URL in a browser, this is actually sending an HTTP request to the corresponding application server. The application server implements the HTTP protocol, which is the universal protocol underpinning the internet (this provides a consistent format for clients and servers to correspond). The application server&rsquo;s role begins with listening for incoming client connection requests. When the server receives and accepts an incoming client connection request, it then reads in the HTTP request sent by the client. The request then needs to be processed in order for the server to send the appropriate HTTP response message to the client. The response sent by the server is responsible for getting the requested website content back to the user&rsquo;s browser.</p>

<p>The above description glosses over the &ldquo;processing&rdquo; that occurs between when the raw HTTP request is read by the server and when the server sends the HTTP response to the client. What exactly does this processing entail? The processing typically includes actions such as parsing, logging, and routing the request to the portion of the web app with the knowledge of how to handle the specific request (i.e. what type of content to be rendered by the browser, how to save form data, etc.).</p>

<h3>Middleware</h3>

<p>Where and when does middleware come into play? As its name suggests, middleware encompasses the processing of an HTTP request between two server-side points: the I/O channels (where requests are received as input and responses are sent as output) and the app-specific route handling. Middleware is often responsible for parsing the HTTP requests and logging information about these requests.</p>

<h3>Benefits of Middleware</h3>

<p>Middleware provides the benefit of modularity among the many components powering web applications on the server-side. Additionally, this also eliminates dependencies between the components. To exemplify, lets examine <a href="https://github.com/rack/rack">Rack</a>, a popular middleware used by Ruby web apps.</p>

<h3>Rack</h3>

<p>Rack underlies the Ruby on Rails framework, as well as Sinatra. It provides adapters for many popular web servers and essentially bridges the gap between web servers and applications. A Rack Application must respond to at least one method, which is a #call method that accepts a hash as a variable. Below is a simple example of a Rack app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RackApp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s2">&quot;Hello world!&quot;</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rack middleware is a class that is initialized with another Rack application and responds to #call(env). Below is a simple example demonstrating the manipulation of the env hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RackMiddleware</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Set PATH_INFO to always be &quot;/hello_world&quot;</span>
</span><span class='line'>    <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;/hello_world&#39;</span>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suppose a developer is in charge of building and deploying a Ruby application. At the beginning of the project, the developer decides the web application will be a Rack application and Rack middleware will be used with a supported server. The developer reviews all of the supported servers A, B, C, and D and selects server D since it was the fastest server that met the application&rsquo;s needs. Down the road, a new server (server E) is released, which is documented to be twice as fast as Server D (i.e. <a href="http://www.rubyraptor.org/">Phusion Passenger 5</a>). Given the modularity created by the decision to use Rack, the developer is able to swap out server D with ease, replacing it with Server E. This change would simply require the use of a Rack server handler specific to server E instead of server D. No other changes would be necessary. Additionally, since the application code is completely uncoupled from the server, the application will not experience any side effects from replacing the application server.</p>

<p>The diagram below is from a <a href="http://www.rubyraptor.org/how-we-made-raptor-up-to-4x-faster-than-unicorn-and-up-to-2x-faster-than-puma-torquebox/">Ruby Raptor blog post</a> and does a great job illustrating this.</p>

<div style="text-align: center"><img src="http://lisahamm.github.io/images/rack.png" /></div>


<h3>Building a server</h3>

<p>I am currently implementing my own HTTP server from scratch in Java, which is what led me to learning about middleware. Before I started this project, I had no idea what Rack was doing behind the scenes in Ruby web apps. Writing my own server has helped me gain a great deal of insight into what is really going on &ldquo;under the hood&rdquo; in frameworks such as Ruby on Rails and Sinatra. I think this is a great personal project for developers who have a surface understanding of web app development, but might not have taken a deep dive into the HTTP protocol.  &ldquo;I hear and I forget. I see and I remember. I do and I understand.&rdquo; -Confucius</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Pattern]]></title>
    <link href="http://lisahamm.github.io/blog/2015/05/14/factory-pattern/"/>
    <updated>2015-05-14T16:32:02-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/05/14/factory-pattern</id>
    <content type="html"><![CDATA[<p>The Abstract Factory Pattern entails implementing a class solely responsible for creating concrete objects that conform to an abstract interface.<!--more--> Since concrete classes have the potential to be very volatile, depending upon them often leads to a headache. Modules containing the <code>new</code> keyword all over the place smell of rigidity. However, in order to build a program, objects need to be initialized somewhere in the code. By isolating the unstable dependencies, we can uncouple them from the rest of the code and prevent modifications from having unintended effects in other areas of the program. Concrete classes have to be created somewhere in a program, but they do not have to be directly depended upon.The Abstract Factory Pattern helps to accomplish this uncoupling by creating a factory class to initialize concrete classes adhering to a common interface. Using a Factory Implementation class allows for dependencies on abstractions while still creating the necessary concrete classes.</p>

<h3>Handling HTTP Requests</h3>

<p>Lets consider the following example. An HTTP server is responsible for receiving and sending messages to clients. Suppose we want to build our own server capable of responding to GET request messages and POST request messages. Both types of requests are handled in a similar manner, but slight differences exist in their respective handling details. We can use a <code>RequestHandlerFactoryImplementation</code> to contain the GetRequestHandler and PostRequestHandler initializations.</p>

<p>In order to ensure the Open-Closed Priniciple is followed, a layer of abstraction can be placed upon the RequestHandlerFactoryImplementation by defining a RequestHandlerFactory interface with a &ldquo;make&rdquo; method that accepts a request method string.</p>

<div style="text-align: center"><img src="http://lisahamm.github.io/images/factory_pattern.png" /></div>


<p>This way, if the requirements of our server change to include other types of requests (such as PUT and DELETE requests), this change is isolated from the server since the factory interface and the RequestHandler interface will still remain the same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class RequestHandlerFactory implements HandlerFactory {
</span><span class='line'>    public RequestHandler make(String requestMethod) throws Exception {
</span><span class='line'>        if (requestMethod.equals("GET"))
</span><span class='line'>            return new GetRequestHandler(new GetResponseBuilder());
</span><span class='line'>        else if (requestMethod.equals("POST"))
</span><span class='line'>            return new PostRequestHandler();
</span><span class='line'>        else if (requestMethod.equals("PUT"))
</span><span class='line'>            return new PutRequestHandler();
</span><span class='line'>        else if (requestMethod.equals("OPTIONS"))
</span><span class='line'>            return new OptionsRequestHandler();
</span><span class='line'>        else
</span><span class='line'>            throw new Exception("RequestHandlerFactory cannot create handler for " + requestMethod + " request");
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public interface HandlerFactory {
</span><span class='line'>    void make(String requestMethod);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>SOLID</h3>

<p>This use of the abstract factory pattern has created code that adheres to both the Dependency Inversion Principle and the Open-Closed Principle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting a Java Web Server]]></title>
    <link href="http://lisahamm.github.io/blog/2015/05/01/starting-a-java-web-server/"/>
    <updated>2015-05-01T10:14:00-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/05/01/starting-a-java-web-server</id>
    <content type="html"><![CDATA[<p>After building an echo server and a chat server in Java, I moved on to building a HTTP (Hypertext Transfer Protocol) server.<!--more--> I started by getting a suite of acceptance tests for the server running on my computer. I was surprisingly excited for this for a couple of reasons. First, I have read a lot about acceptance tests in Uncle Bob&rsquo;s books, <a href="http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073">Clean Coder</a> and <a href="http://www.amazon.com/Software-Development-Principles-Patterns-Practices/dp/0135974445">Agile Software Development</a>, but I have yet to actually work with these. Secondly, I have heard other apprentices discuss the acceptance tests during our daily standup meeting, and now I am able to join the conversation.</p>

<h3>Acceptance Tests</h3>

<p>Acceptance tests provide documentation of the features of a system. These tests are usually written by the customer and serve to verify the customer&rsquo;s requirements are being met. While unit tests provide coverage for small elements of the internals of the system, acceptance tests ensure the system is working properly as a whole.</p>

<p>At 8th Light, apprentices use a <a href="http://fitnesse.org/">FitNesse</a> test suite, <a href="https://github.com/8thlight/cob_spec">Cob Spec</a>, to validate a server adheres to the HTTP specifications. I followed the instructions in Cob Spec&rsquo;s readme, which was pretty straightforward, but I did run into an error when I ran <code>$ mvn package</code>. The build was failing but I was not quite sure why. Turns out, it was because Cob Spec was written for Java 7, but I am using Java 8. In order to fix this issue, I downloaded Java 7, added it to my PATH, and built the project by executing the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export JAVA_HOME=/usr/java/jdk1.7.0_80/bin/java
</span><span class='line'>$ export PATH=$PATH:/usr/java/jdk1.7.0_80/bin
</span><span class='line'>$ mvn package</span></code></pre></td></tr></table></div></figure>


<p>After doing this, I closed out of the terminal window I was working in order to switch back to Java 8 for development. At this point, I was able to run the test suite, though all the tests were failing since I had yet to write any code for my web server. The next step would entail writing code to pass a single acceptance test.</p>

<h3>What is HTTP?</h3>

<p>Before diving into the first test, it helps to have an understanding of HTTP. HTTP is a request/response protocol used by the World-Wide Web global initiative. The generic, stateless, application-level protocol allows for systems to be built independently of the data being transferred through request and response messages. The official protocol can be found <a href="http://tools.ietf.org/html/rfc2616#section-1">here</a>.</p>

<h3>HTTP Messages</h3>

<p>HTTP messages are sent in the form of requests and responses. The general format looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Start-line CRLF
</span><span class='line'>Message-header CRLF
</span><span class='line'>CRLF
</span><span class='line'>[message-body]</span></code></pre></td></tr></table></div></figure>


<p>It should be noted there can be several message-header lines in an HTTP message. <code>CRLF</code> indicates a new line (it stands for carriage return and line feed). The CRLFs become important when interpreting a message because they indicate where the various components of a message start and end. Let&rsquo;s break this down further by exploring the request and response messages separately.</p>

<h3>HTTP Request</h3>

<p>A request follows the message format above. The first line of the request (the start-line) is specifically referred to as the request-line, and is made up of the following components:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Method Request-URI HTTP-Version CRLF</span></code></pre></td></tr></table></div></figure>


<p>The method is the action to be performed on a specified resource. The possible methods are GET, POST, PUT, DELETE, OPTIONS, HEAD, TRACE, and CONNECT. A resource is a chunk of information that can be identified by a Uniform Resource Identifier (URI). In the request-line, the Request-URI identifies the resource on which to apply the given method. A GET request simply asks a server to return a representation of some resource. A POST request is used to submit data to the server. A PUT request is used to create or update data on the server. A DELETE request removes/destroys a resource on the server. The HTTP-Version in the request-line specifies the version of the protocol being used. The following is an example of an actual request line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<h3>HTTP Response</h3>

<p>Response messages also follow the general message format. The message start-line is specifically referred to as the status-line. The breakdown of the status-line components is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP-Version Status-code Reason-phrase CRLF</span></code></pre></td></tr></table></div></figure>


<p>Again, the HTTP-Version is the specific protocol version being used. The status-code is a three-digit integer that identifies a success or error in handling the request. The first digit of the status-code must be a number 1 through 5 which indicates the category of response. The protocol defines the categories as follows:</p>

<p>-1xx: Informational - Request received, continuing process<br>
-2xx: Success - The action was successfully received, understood, and accepted<br>
-3xx: Redirection - Further action must be taken in order to complete the request<br>
-4xx: Client Error - The request contains bad syntax or cannot be fulfilled<br>
-5xx: Server Error - The server failed to fulfill an apparently valid request<br></p>

<p>The reason-phrase is a brief text description of the status-code intended for the human user. An example of an actual response-line is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK</span></code></pre></td></tr></table></div></figure>


<h3>Next steps</h3>

<p>After becoming more familiar with the HTTP protocol, I felt prepared to tackle my first acceptance test. Looking for the easiest test, I chose to start with a simple GET request that would return a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">response code</a> of 200 (which indicates the request succeeded).</p>

<h3>Helpful Resources</h3>

<p>-<a href="http://www.jmarshall.com/easy/http/#resources">HTTP Made Really Easy</a><br>
-<a href="http://tools.ietf.org/html/rfc2616#section-1">Official HTTP Protocol</a><br>
-<a href="http://docs.oracle.com/javase/tutorial/networking/index.html">Java Tutorial: Networking</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Chat Server: Part 2]]></title>
    <link href="http://lisahamm.github.io/blog/2015/04/13/creating-a-chat-server-part-2/"/>
    <updated>2015-04-13T13:54:18-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/04/13/creating-a-chat-server-part-2</id>
    <content type="html"><![CDATA[<p>After <a href="http://www.lisahamm.com/blog/2015/04/07/creating-a-chat-server/">creating a working chat server</a> (able to connect with multiple clients and display user input to all clients), I received some feedback and set out to improve my current code. In this post, I will walk through the steps I took to respond to the feedback I received. <!--more--></p>

<h3>Thread-safe code</h3>

<p>In the first iteration of my chat server, I created a set containing the printWriters of all connected sockets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static Set&lt;PrintWriter&gt; printWriters = new HashSet&lt;PrintWriter&gt;();</span></code></pre></td></tr></table></div></figure>


<p>While this was working when I manually tested my server, it is not a sound way of accomplishing what I was trying to do. When working with threads, it is important to make sure the code is thread-safe. If multiple threads try to access the same thing at once, issues may arise. In this case, the set should be synchronized in order to guarantee serial access and prevent any unanticipated problems. This way, only one thread can utilize the set a time. Using the <code>Collections.synchronizedSet</code> method, I refactored the line of code above as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static Set&lt;PrintWriter&gt; printWriters = Collections.synchronizedSet(new HashSet&lt;PrintWriter&gt;());</span></code></pre></td></tr></table></div></figure>


<h3>Eliminate dependencies</h3>

<p>Although the first iteration of the chat server was functioning, its overall design left room for improvement. In its current state, the ChatThread class is fairly coupled to the ChatServer class. It knows about the printWriter HashSet in the server. In order to eliminate this code smell, I began exploring the observer pattern.</p>

<h3>The Observer Pattern</h3>

<blockquote><p>&ldquo;Observer is one of those patterns that, once you understand it, you see uses for it everywhere.&rdquo;
-Uncle Bob in <em>Agile Software Development: Priniciples, Patterns, and Practices</em></p></blockquote>

<p>The Observer Pattern is typically used for a one-to-many dependency among objects, such that when one object changes, all dependent objects are notified. The independent object is typically referred to as the Concrete Observable and the dependent objects are Concrete Observers. The concrete observable object inherits from an abstract class or interface usually known as the Observable or Subject, which contains a method to register a new observer and a method to notify observers when the observable changes. Concrete Observers implement the Observer interface, which contains an update method (see the UML diagram below).</p>

<p><img src="http://lisahamm.github.io/images/observer_uml.png" /></p>

<p>So, how could I apply this pattern to a chat server? At first, it seemed simple to me: there were many ChatThread objects that needed to be updated each time a user submitted text. If the chatThread was the observer, then I thought the only object I had left, the server, would be the observable. However, it didn&rsquo;t seem like this should fall into the server&rsquo;s responsibility. After considering different possibilities for this design, I decided to implement a new <code>ChatSubject</code> class to take on the role of the Subject:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatSubject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Vector</span> <span class="n">itsObservers</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Vector</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">itsObservers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">itsObservers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Observer</span> <span class="n">observer</span> <span class="o">=</span> <span class="o">(</span><span class="n">Observer</span><span class="o">)</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>                <span class="n">observer</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">itsObservers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deregisterObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">itsObservers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new <code>ChatSubject</code> class would be responsible for registering, deregistering, and notifying observers (the other chat threads in this case). An instance of ChatSubject would be initialized in the ChatServer class and subsequently passed into the ChatThread during its initialization. In the ChatThread&rsquo;s <code>run()</code> method, the thread instance is registered with the ChatSubject, and when the user submits input, ChatSubject&rsquo;s <code>notifyObservers()</code> method is called. My code can be seen below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Socket</span> <span class="n">clientSocket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ChatSubject</span> <span class="n">chatSubject</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ChatThread</span><span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span><span class="o">,</span> <span class="n">ChatSubject</span> <span class="n">chatSubject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="s">&quot;ChatThread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">clientSocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">chatSubject</span> <span class="o">=</span> <span class="n">chatSubject</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">(</span>
</span><span class='line'>                <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()))</span>
</span><span class='line'>        <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">printWriter</span> <span class="o">=</span> <span class="n">out</span><span class="o">;</span>
</span><span class='line'>            <span class="n">chatSubject</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, there. Please enter a username to join the chat: &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">String</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">inputLine</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="s">&quot; says: &quot;</span> <span class="o">+</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">inputLine</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Bye&quot;</span><span class="o">))</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="n">chatSubject</span><span class="o">.</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">clientSocket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">printWriter</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How has this helped improve the code?</h3>

<p>By using a form of the Observer pattern, the code was able to become less coupled and more flexible. The chat thread class is no longer aware of the server class. The Observer pattern also creates flexibility in that Observers can potentially be of any class, as long as they implement the Observer interface. Different types of Observers may need to update in different ways and the Observer&rsquo;s <code>update()</code> method allows for this while hiding the implementation details.</p>

<p>The next piece of feedback I addressed was properly shutting down the server. My next post will detail this process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Chat Server: Part 1]]></title>
    <link href="http://lisahamm.github.io/blog/2015/04/07/creating-a-chat-server/"/>
    <updated>2015-04-07T16:40:15-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/04/07/creating-a-chat-server</id>
    <content type="html"><![CDATA[<p>After building an <a href="http://www.lisahamm.com/blog/2015/04/06/creating-an-echo-server/">echo server in Java</a>, I moved on to my next project: a chat server. The chat server requires the capability to connect to and handle multiple clients at a time.<!--more--> When one client submits text, the message would need to be sent to all connected clients for viewing. Since the echo server was designed to handle one client connection at a time, my first step was investigating ways a server could handle multiple client connections at a time.</p>

<h3>Concurrent Programming: Threads</h3>

<p>There are two options for executing code simultaneously: <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html">threads and processes</a>. Both are self-contained execution environments, but a thread is considered to be more lightweight as compared to a process and takes up less resources during its creation. Java provides the java.lang.Thread class to use for creating Thread objects. Providing code to be executed by a thread can be done in two different ways. One way is through a runnable object, which would define a run method containing the code to be executed in the thread. Alternatively, a subclass of Thread that provides its own run method can be used.</p>

<h3>Implementing a subclass of Thread</h3>

<p>I chose to subclass Thread for my chat server. The flow of my code would resemble that of my echo server up to the point of making a successful server client connection. Once the ServerSocket&rsquo;s accept method is executed, a new thread should be created to handle the newly created socket object. This allows the server to handle simultaneous connections with clients. Lets examine the process of implementing the thread subclass starting with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ChatThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The client socket will need to be passed in as an argument in order to initialize the ChatThread object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ChatThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Socket</span> <span class="n">clientSocket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ChatThread</span><span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="s">&quot;ChatThread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">clientSocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, lets take a look at the run method, which should contain the code to be executed by the thread. First, the thread needs to open readers and writers on the socket&rsquo;s input and output streams:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">(</span>
</span><span class='line'>          <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>          <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, the run method has opened a reader and writer on the clientSocket input and output streams, but it has yet to do anything with this. Thinking back to the echo server, the clientSocket was responsible for reading the data sent to its input stream and then writing this back to its output stream. For a chat server, dealing with input is similar, but the output is different due to needing to update all clients with the output. Here is what I started with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">(</span>
</span><span class='line'>            <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">inputLine</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Writing to the output streams</h3>

<p>The code above handles input from multiple clients, but it does not yet provide the chat functionality of displaying one client&rsquo;s message for all other clients to see. One way to do this is for the ChatServer to save all of the PrintWriters that have been opened on socket output streams:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">PrintWriter</span><span class="o">&gt;</span> <span class="n">printWriters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">PrintWriter</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used a HashSet to store the open printWriters. In Java, a set is used for a collection of elements with no duplicates. A HashSet is a Set backed by a HashMap. To store the PrintWriters, I added the following line of code to the ChatThread&rsquo;s run method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">printWriters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, to actually make use of the set of PrintWriters, I added code to the run method to print the input to all opened PrintWriters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">(</span>
</span><span class='line'>          <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>          <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">printWriters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">inputLine</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>            <span class="k">for</span><span class="o">(</span><span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">:</span> <span class="n">printWriters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">printWriter</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Adding a username</h3>

<p>After using <a href="http://www.telnet.org/htm/faq.htm">Telnet</a> to verify multiple clients could connect and see text submitted by another user, I realized I was missing a key component of a chat: the username. The following code asks the client to input a username immediately after connecting and proceeds to print the username with each of the user&rsquo;s messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">(</span>
</span><span class='line'>          <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>          <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">printWriters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, there. Please enter a username to join the chat: &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">inputLine</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>            <span class="k">for</span><span class="o">(</span><span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">:</span> <span class="n">printWriters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">printWriter</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">username</span> <span class="o">+</span> <span class="s">&quot; says: &quot;</span> <span class="o">+</span> <span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ChatServer class</h3>

<p>Incorporating the ChatThread into the ChatServer class produced the following main method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: java EchoServer &lt;port number&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">portNumber</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">(</span><span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span>
</span><span class='line'>                     <span class="k">new</span> <span class="nf">ServerSocket</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">])))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server is listening on port: &quot;</span> <span class="o">+</span> <span class="n">portNumber</span><span class="o">);</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Socket</span> <span class="n">clientSocket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Connection made with &quot;</span> <span class="o">+</span> <span class="n">clientSocket</span><span class="o">);</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ChatThread</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Exception caught when trying to listen on port &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="n">portNumber</span> <span class="o">+</span> <span class="s">&quot; or listening for a connection&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Next steps</h3>

<p>While the current chat server is functioning, there are still improvements to be made. My next post will build upon this one, going into detail on the next steps. You can check out the code on my <a href="https://github.com/lisahamm/JavaChatServer">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Echo Server]]></title>
    <link href="http://lisahamm.github.io/blog/2015/04/06/creating-an-echo-server/"/>
    <updated>2015-04-06T15:03:52-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/04/06/creating-an-echo-server</id>
    <content type="html"><![CDATA[<p>One of the projects 8th Light residents complete is a Java HTTP server. This week, I started working on a couple of programs to ease into the world of web servers.<!--more--> The first is a simple Echo Server program that will say &ldquo;Hello&rdquo; upon connection and repeat all of the messages sent to it by the client. Subsequently, I will build upon the program to create a chat server that allows multiple connections. When one person enters text, everyone connected to the server will see it.</p>

<p>I have not written any Java code for some time now, so I began by downloading <a href="https://www.jetbrains.com/idea/download/">IntelliJ</a> which seems to be the Java IDE of choice at 8th Light. Next, I began reading about the Transmission Control Protocl (TCP) and sockets. <a href="https://docs.oracle.com/javase/tutorial/networking/sockets/index.html">Oracle&rsquo;s Java tutorials</a> proved to be a useful resource in learning about both. The rest of this post is an overview of what I learned from the tutorial, and my experience creating, running, and connecting to an Echo Server.</p>

<h3>TCP</h3>

<p>TCP is a network communication protocol that provides a reliable channel for a client and a server to communicate with eachother. Client-server applications on the internet communicate over TCP by establishing a connection between the client and server and binding a socket to each end of the connection. The server and the client read from and write to their respective socket.</p>

<h3>What is a socket?</h3>

<p>A socket is defined as &ldquo;one endpoint of a two-way communication link between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to.&rdquo; <a href="https://docs.oracle.com/javase/tutorial/networking/sockets/definition.html">(Oracle Documentation)</a>. The server continuously listens to its socket for connection requests. When a client wants to make a request to the server, it binds to a local port number to identify itself, and then uses the host name and port number of the server&rsquo;s socket to request a connection. When a connection is established, the server binds a new socket to the same local port so it can listen for incoming requests as well as communicate with the connected client. Every connection can be uniquely identified by its sockets, since these endpoints are a combination of an IP address and port number.</p>

<h3>Creating a socket using Java</h3>

<p>A Socket class is included in the java.net package and allows Java programs to communicate in a platform-independent way, by hiding system-specific details from the program. A ServerSocket class is also included and allows servers to listen for requests and make connections.</p>

<h3>Building an EchoServer</h3>

<p>The EchoServer program will take a port number as a commandline argument, which is used as the location for binding the ServerSocket object that will listen for connection requests from a client. Let&rsquo;s take a look at the start of the EchoServer program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EchoServer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: java EchoServer &lt;port number&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">portNumber</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main method will return an error if it is not given exactly one argument to use as the port number. If exactly one argument is passed in, the program will set its <code>portNumber</code> variable to the argument value.</p>

<p>Here are the next few steps:
(1) Create the server socket to bind to the server&rsquo;s specified port.
(2) Accept the connection request from the client.
(3) Open a <code>PrintWriter</code> on the socket&rsquo;s output stream.
(4) Open a <code>BufferedReader</code> on the socket&rsquo;s input stream.</p>

<p>These steps can be completed in a try-with-resources statement to ensure the sockets, PrintWriter, and BufferedReader are closed at the end of the statement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">(</span>
</span><span class='line'>      <span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ServerSocket</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>      <span class="n">Socket</span> <span class="n">clientSocket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>      <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">((</span><span class="n">inputLine</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Exception caught when trying to listen on port &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">portNumber</span> <span class="o">+</span> <span class="s">&quot; or listening for a connection&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above declares instances of ServerSocket, Socket, PrintWriter, and BufferedReader as resources. If the ServerSocket, which listens for connection requests from clients, is successfully created and bound to the specified port number, the program moves on to this line of code: <code>Socket clientSocket = serverSocket.accept();</code>. The <code>accept</code> method returns a new Socket object, with its remote address and port set to that of the client, bound to the specified port number of the server. This allows the server to communicate with the client using this new socket, while the ServerSocket continues to listen for connection requests.</p>

<p>The program writes &ldquo;Hello&rdquo; to the output stream, reads input from the client, and then writes the input to its output stream (creating the &lsquo;echo&rsquo;). The ServerSocket constructor will throw an exception if it is unable to be created on the specified port, so the catch statement prints out the corresponding message when this is the case.</p>

<p>Putting this all together produces the following program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EchoServer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: java EchoServer &lt;port number&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">portNumber</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">(</span>
</span><span class='line'>                <span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">ServerSocket</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>                <span class="n">Socket</span> <span class="n">clientSocket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>                <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">inputLine</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">inputLine</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputLine</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Exception caught when trying to listen on port &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="n">portNumber</span> <span class="o">+</span> <span class="s">&quot; or listening for a connection&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Connecting with the server</h3>

<p>Once the EchoServer class has been created, it is time to try running the server. Remember, the program requires the port number commandline argument in order to run. In IntelliJ, you can set program arguments by going to the &ldquo;Run&rdquo; menu, clicking on &ldquo;Edit Configurations,&rdquo; and filling in the &ldquo;Program Arguments&rdquo; field inside the &ldquo;Configuration&rdquo; tab. If the port number argument is provided in this way, the server will start running when the program is run through clicking IntelliJ&rsquo;s &ldquo;Run&rdquo; button.</p>

<p><a href="http://www.telnet.org/">Telnet</a>, a network protocol and also an application that uses the protocol, can be used to connect to the server through the terminal. In the terminal, use the following format to connect to the server: <code>$ telnet servername-or-ip port-number</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">telnet</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="mi">4444</span>
</span></code></pre></td></tr></table></div></figure>


<p>Conventionally, 127.0.0.1 is a reserved IP address used as loopback address on computers. This means when a message is sent to it, it is re-routed to the computer&rsquo;s own TCP/IP stack without being sent out of the computer.</p>

<p>The format of If the connection is established, a message will appear in the terminal stating something like, &ldquo;Connected to host-name.&rdquo; With this particular server, a &ldquo;Hello&rdquo; message should also be printed in the terminal. To see the echo in action, type any message, hit enter, and the same message should be returned and printed in the terminal.</p>

<h3>Summary</h3>

<p>TCP provides reliable communication between a server and client. The server has a designated port with a socket listening for connection requests from clients. When the server-client connection is established successfully, both the server and the client communicate through their respective sockets by reading from the input stream and writing to the output stream.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a PostgreSQL Database]]></title>
    <link href="http://lisahamm.github.io/blog/2015/03/24/creating-a-postgresql-database/"/>
    <updated>2015-03-24T11:08:59-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/03/24/creating-a-postgresql-database</id>
    <content type="html"><![CDATA[<p><a href="http://www.postgresql.org/">PostgreSQL</a> is an open-source object-relational database management system. PostgreSQL is derived from a project completed at UC Berkeley, and it is now one of the most advanced open-source database available.</p>

<!--more-->


<h3>Getting Started</h3>

<p>To begin working with PostgreSQL, you will need to download it <a href="http://www.postgresql.org/download/">here</a>. Conceptually, it helps to think of a database as an Excel file. A database is comprised of tables and the tables are comprised of columns and rows. To create a database in the terminal, type: <code>createdb database_name</code>.</p>

<p>In order to start developing the database&rsquo;s schema (i.e. its configuration), type: <code>psql database_name</code>.</p>

<p>To create a table within the database, type: <code>CREATE TABLE table_name ();</code>.<br></p>

<p><em>Note, SQL convention is to write commands in all caps and arguments in lowercase.</em><br></p>

<p>Typing <code>\d</code> will display a list of the database&rsquo;s relations. To illustrate, consider a database with the name &ldquo;example&rdquo; that has a table with the name &ldquo;test.&rdquo; Typing <code>\d</code> will return the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> List of relations
</span><span class='line'> Schema | Name | Type  |  Owner
</span><span class='line'>--------+------+-------+----------
</span><span class='line'> public | test | table | lisahamm
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<h3>Working with tables</h3>

<p>Once you have a database with a table, the next logical step would be to add a column. To do so, type: <code>ALTER TABLE table_name ADD COLUMN column_name DATA_TYPE;</code>. For instance, lets say I want to add a column to store names in my &ldquo;test&rdquo; table created above. This would be accomplished by the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE test ADD COLUMN name TEXT;</span></code></pre></td></tr></table></div></figure>


<p>Likewise, adding a second column to the &ldquo;test&rdquo; table to store email addresses would be accomplished by the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE test ADD COLUMN email TEXT;</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, a table can be created with columns in one step as opposed to creating a table, then adding columns, one by one. The &ldquo;test&rdquo; table from above could also be created in the following way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE test (
</span><span class='line'>    name      text,
</span><span class='line'>    email     text
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>Running <code>\d &lt;table_name&gt;</code> will display the table&rsquo;s columns. Executing this for the &ldquo;test&rdquo; table would look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# \d test;
</span><span class='line'>    Table "public.test"
</span><span class='line'> Column | Type | Modifiers
</span><span class='line'>--------+------+-----------
</span><span class='line'> name   | text |
</span><span class='line'> email  | text |</span></code></pre></td></tr></table></div></figure>


<p>In order to get the data for all rows and columns, you can use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT * FROM table_name;</span></code></pre></td></tr></table></div></figure>


<p>Running this on the &ldquo;test&rdquo; table is not too exciting at the moment since data has yet to be entered:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT * FROM test;
</span><span class='line'> name | email
</span><span class='line'>------+-------
</span><span class='line'>(0 rows)</span></code></pre></td></tr></table></div></figure>


<h3>Adding data values to a table</h3>

<p>To add data values to a table, type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO table_name (column_name) VALUES('data value');</span></code></pre></td></tr></table></div></figure>


<p>Lets add some data to the &ldquo;test&rdquo; table for someone by the name of &ldquo;Bob&rdquo; with an email address of &ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x62;&#111;&#98;&#64;&#x74;&#x65;&#x73;&#116;&#46;&#x63;&#111;&#x6d;">&#98;&#x6f;&#98;&#64;&#116;&#x65;&#115;&#x74;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO test (name, email) VALUES('Bob', 'bob@test.com');</span></code></pre></td></tr></table></div></figure>


<p>There is now data in the &ldquo;test&rdquo; table that will be displayed by <code>select *</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT * FROM test;
</span><span class='line'> name |       email
</span><span class='line'>------+--------------------
</span><span class='line'> Bob  | bob@test.com
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<h3>Selecting specific data, or, querying a table</h3>

<p>Generally, tables will contain more than one row of data. Consider our test table with the following data rows in it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT * FROM test;
</span><span class='line'> name |       email
</span><span class='line'>------+--------------------
</span><span class='line'> Bob  | bob@test.com
</span><span class='line'> Bob  | bobby@example.com
</span><span class='line'> Lisa | lisa@test.com
</span><span class='line'> Katie| katie@test.com
</span><span class='line'>(3 rows)</span></code></pre></td></tr></table></div></figure>


<p>How do we select specific data? This is also referred to as &lsquo;querying a table&rsquo; and can be done by adding some additional code to the SQL <code>select</code> statement. For instance, this is how you would select all data rows containing a name equal to &ldquo;Bob&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT * FROM test WHERE name='Bob';
</span><span class='line'> name |       email
</span><span class='line'>------+-------------------
</span><span class='line'> Bob  | bob@test.com
</span><span class='line'> Bob  | bobby@example.com
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>To select just email addresses for those with a name of &ldquo;Bob&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT email FROM test WHERE name='Bob';
</span><span class='line'>       email
</span><span class='line'>-------------------
</span><span class='line'> bob@test.com
</span><span class='line'> bobby@example.com
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>To select email and name, respectively, for those named &ldquo;Bob&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT email,name FROM test WHERE name='Bob';
</span><span class='line'>       email       | name
</span><span class='line'>-------------------+------
</span><span class='line'> bob@test.com      | Bob
</span><span class='line'> bobby@example.com | Bob
</span><span class='line'>(2 rows)</span></code></pre></td></tr></table></div></figure>


<p>Perhaps there is a need for the number of &ldquo;Bobs&rdquo; in the table. This is found by using <code>count</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT count(*) FROM test WHERE name='Bob';
</span><span class='line'>count
</span><span class='line'>-------
</span><span class='line'>     2
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>It is also possible to limit results to a specific number:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>example=# SELECT email,name FROM test WHERE name='Bob' LIMIT 1;
</span><span class='line'>       email       | name
</span><span class='line'>-------------------+------
</span><span class='line'> bob@test.com      | Bob
</span><span class='line'>(1 row)</span></code></pre></td></tr></table></div></figure>


<p>Perhaps there is a need for all names to be ordered alphabetically. This can be done with the following line of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT name FROM test ORDER BY name ASC;</span></code></pre></td></tr></table></div></figure>


<p>Note, &ldquo;ASC&rdquo; can be replaced with &ldquo;DESC&rdquo; to return data in descending order.</p>

<h3>Updating</h3>

<p>Existing rows in a table can be updated using the <code>UPDATE</code> command. For example, if Katie&rsquo;s email address changes to &ldquo;katie@example.com,&rdquo; the following command will update her email in the &ldquo;test&rdquo; table:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPDATE test
</span><span class='line'>    SET email = 'katie@example.com'
</span><span class='line'>    WHERE name = 'Katie'</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Thinking of databases as Excel files may help in understanding them conceptually. Knowing specifics relating to querying tables is important because PostgreSQL is well-equipped for doing this efficiently. For this reason, ordering, searching, and other queries should be done by the database and not somewhere else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Basics]]></title>
    <link href="http://lisahamm.github.io/blog/2015/03/23/git-basics/"/>
    <updated>2015-03-23T10:22:35-05:00</updated>
    <id>http://lisahamm.github.io/blog/2015/03/23/git-basics</id>
    <content type="html"><![CDATA[<h3>What is Git?</h3>

<p>Git is a popular Version Control System that records changes made to files over time. This offers many benefits, such as the capability of reverting changes and comparing changes in files. <!--more-->
If you make changes and suddenly your program stops working, Git makes it easy to revert back to a working state. Git also comes in handy when collaborating with others on a project. Team members are easily able to view who made specific changes at specific time points.</p>

<p>Git is an incredibly useful tool to a developer at any stage in their learning. I would suggest learning the basics of Git as early as possible.</p>

<h3>Getting started with Git</h3>

<p>Conceptually, Git allows users to make changes in a working directory, add specific modified files to a staging area, and commit staged files with messages. Beginning to use Git in a project is fairly straightforward. If you do not yet have Git on your computer, you can download it <a href="http://git-scm.com/downloads">here</a>. Once you have Git downloaded, cd into your project&rsquo;s root directory in the terminal. To initialize a new git repository, type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init</span></code></pre></td></tr></table></div></figure>


<p>It is a good idea to get in the habit of typing <code>git status</code> before and after every git command you execute. This will allow you to see the status of your files and double check the files are actually being staged and committed the way you think they are. Running <code>git status</code> at this point will return:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Untracked files:
</span><span class='line'>  (use "git add &lt;file&gt;..." to include in what will be committed)
</span><span class='line'>
</span><span class='line'>        # All files in the project folder will be listed here</span></code></pre></td></tr></table></div></figure>


<p>Next, you will need to get the files you would like to be tracked into the new Git repository you created. This will require two steps. First, the files need to be staged. To do this for individual files, type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add &lt;filename&gt;</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, if you would like to do this for all of your files at once, type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .</span></code></pre></td></tr></table></div></figure>


<p>Once you think the files have been added to the staging area, it is a good idea to double check with <code>git status</code>, which should return:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>  new file:   # your filename</span></code></pre></td></tr></table></div></figure>


<p>Once the files have been added to the staging area, the second step is to actually commit the proposed changes with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m "Commit message"</span></code></pre></td></tr></table></div></figure>


<p>This will commit your changes, along with your message, to the HEAD of the git repository.</p>

<h3>Now what?</h3>

<p>At this point, if you are using a remote repository, you can go ahead and push your changes to it. Otherwise, you are now in good shape to begin making changes to your files. Make sure to track future changes as you go by adding and committing them. It is important to make small, focused commits when possible. This will make it easier to look back at your project changes later on. It also makes your life much easier if you need to revert changes. Prior to staging changes, you can run <code>git diff</code> to view changes made to the files. It is a good idea to do this so you know exactly what you are committing (avoid committing commented-out code, print, puts, and p statements) and thus, will be able to include an accurate message with the commit.</p>

<h3>Work on branches</h3>

<p>By default, when a Git repository is initialized, it is created on the &ldquo;master&rdquo; branch. It is a good idea to become in the habit of creating alternate branches to use for development. These branches can be merged with the master branch once proper changes have been made to them.</p>

<p>To create a new branch and simultaneously switch to it, type the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b branch_name</span></code></pre></td></tr></table></div></figure>


<p>The general format for switching to an existing branch is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout branch_name</span></code></pre></td></tr></table></div></figure>


<p>To switch back to the master branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Branches can be merged with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git merge &lt;branch&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Reverting changes</h3>

<p>Luckily, Git understands mistakes are inevitable and provides ways to revert changes. To discard changes in the working directory (those that haven&rsquo;t yet been staged or committed), the following command will revert your file to its state at the last commit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<p>To remove a file from the staging area, without altering the working directory, use the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<p>To remove all files from the staging area, without altering the working directory, you can simply use <code>git reset</code>.</p>

<p>To remove all uncommitted changes from both the staging area and the working directory, use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard</span></code></pre></td></tr></table></div></figure>


<h3>Takeaway</h3>

<p>Git is a powerful tool one can take advantage of by knowing just a handful of basic commands. Learning to use Git early on during solo/personal projects will be incredibly useful when it comes time to work with a team of developers. Remember to make small, focused commits with meaningful commit messages&ndash;I guarantee your future self will thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Beauty of Using an Options Hash as an Argument]]></title>
    <link href="http://lisahamm.github.io/blog/2015/02/23/the-beauty-of-using-an-options-hash-as-an-argument/"/>
    <updated>2015-02-23T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/02/23/the-beauty-of-using-an-options-hash-as-an-argument</id>
    <content type="html"><![CDATA[<p>What makes code beautiful? I recently listened to an interesting <a href="http://devchat.tv/ruby-rogues/what-makes-beautiful-code">Ruby Rogues episode</a> on this topic, so it is something I have been mindful of lately in my own work.<!--more-->
As a beginner, I find it helpful to hear answers to this question from programmers with more experience since they have undoubtedly read more code than I have, which generally results in being able to better identify what does and doesn&rsquo;t work. I personally think there are a lot of defining characteristics of beautiful code, many of which I am still learning. In this post, I will share one simple technique I have seen used by more experienced programmers that often leads to more expressive code.</p>

<p>While working on building a web application for the <a href="https://github.com/lisahamm/tic_tac_toe">unbeatable tic tac toe</a> program I wrote in Ruby some time ago, I came across some problems when trying to use the code with a different interface (I originally wrote it to run in the terminal). My Board class contained an initialize method with two optional arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TicTacToe</span>
</span><span class='line'>  <span class="no">BOARD_SIZE</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Board</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:cells</span><span class="p">,</span> <span class="ss">:size</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="no">BOARD_SIZE</span><span class="p">,</span> <span class="n">cells</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>      <span class="vi">@cells</span> <span class="o">=</span> <span class="n">cells</span> <span class="o">||</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">size</span><span class="o">*</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># rest of code ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code worked when running the game in the terminal since the board object was simply initialized once at the beginning of the game. However, when trying to use the code with a web interface, I soon realized this code could benefit from some refactoring. Using Sinatra to build the web app, I found myself using sessions to keep track of the board state. I decided to create the board by initializing a Board object with a moves array stored in a session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/game&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@player_mark</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:mark</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:moves</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:moves</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@board</span><span class="o">.</span><span class="n">symbols_to_array</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:board</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also decided to use Ruby&rsquo;s Struct class to create Cell objects and wrote a <code>cellify</code> method to format cell data passed in as an argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">size</span> <span class="o">=</span> <span class="no">BOARD_SIZE</span><span class="p">,</span> <span class="n">cells</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>  <span class="vi">@cells</span> <span class="o">=</span> <span class="n">cellify</span><span class="p">(</span><span class="n">cells</span> <span class="o">||</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">size</span><span class="o">*</span><span class="n">size</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Cell</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:symbol</span><span class="p">,</span> <span class="ss">:index</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cellify</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span><span class="o">.</span><span class="n">each_with_index</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">symbol</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="no">Cell</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span> <span class="n">index</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Problem</h3>

<p>Attempting to run the code at this point resulted in an error message since the board&rsquo;s <code>initialize</code> method was expecting a board size parameter to be passed in as its first argument. In order to fix this, the caller would have to pass the cells as the second argument. However, that would force the caller to also have to pass something for the first argument, which defeats the point of having an optional parameter. So how could the caller pass in only the arguments which they care about and ignore the others, having them safely defaulted?</p>

<h3>A Better Way</h3>

<p>Instead of passing in multiple arguments, a common practice is to pass in one argument, which is a hash containing arguments as key-value pairs. Default values can be provided by a method that returns a hash and then is subsequently merged with the actual arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="n">defaults</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@size</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:size</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@cells</span> <span class="o">=</span> <span class="n">cellify</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:cells</span><span class="o">]</span> <span class="o">||</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">size</span><span class="o">*</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span><span class="kp">nil</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">defaults</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">size</span><span class="p">:</span> <span class="no">BOARD_SIZE</span><span class="p">,</span> <span class="ss">cells</span><span class="p">:</span> <span class="kp">nil</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing this allows the caller to then pass in values to overide the defaults as needed. The caller does not have to pass certain arguments in every time an object is initialized when using the default values. This technique also makes the argument order irrelevant, which becomes particularly important when passing a large number of arguments to a method.</p>

<h3>Beautiful Code</h3>

<p>Overall, this simple technique lends itself to creating more flexible, reusable, and in my opinion, beautiful code. Incorporating this into the app&rsquo;s server file also seemed to facilitate readability since the key is now serving as somewhat of a label for the argument being passed to board:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/game&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@player_mark</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:mark</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">cells</span><span class="p">:</span> <span class="n">session</span><span class="o">[</span><span class="ss">:moves</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:moves</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@board</span><span class="o">.</span><span class="n">symbols_to_array</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:board</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat! I will definitely be utilizing this technique in my code from now on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Word Wrap Kata Refactoring]]></title>
    <link href="http://lisahamm.github.io/blog/2015/02/16/word-wrap-kata-refactoring/"/>
    <updated>2015-02-16T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/02/16/word-wrap-kata-refactoring</id>
    <content type="html"><![CDATA[<p>In my last <a href="http://www.lisahamm.com/blog/2015/02/12/word-wrap-kata-in-ruby/">post</a>, I walked through the steps involved in Uncle Bob&rsquo;s <a href="http://thecleancoder.blogspot.com/2010/10/craftsman-62-dark-path.html">Word Wrap Kata</a>. In this post, I will continue with some refactoring steps specific to a solution written in Ruby.</p>

<!--more-->


<h3>The Starting Point</h3>

<p>Completing the initial steps of the kata in Ruby resulted in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">space_index</span> <span class="o">=</span> <span class="p">(</span><span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">reverse</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">space_index</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">space_index</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Practice With Monkey Patching</h3>

<p>For learning purposes, my mentor suggested I add my own methods to Ruby&rsquo;s String class (a process often referred to as monkey patching), so I could see how the process works (but note that in practice this is usually not a good idea). To start, I added two methods to Ruby&rsquo;s string class: a method to return the last index of a given character in a string (similar to Java&rsquo;s lastIndexOf() method) and a method to return the rest of a string from a given index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_index_of</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span> <span class="nb">self</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rest_from</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">[</span><span class="n">index</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Optimizing the last_index_of(character) Method</h3>

<p>Further refactoring can be done to the last_index_of(character) method. I removed the &lsquo;self&rsquo; reference since Ruby will call methods without explicit receivers on whatever object is currently assigned to &lsquo;self,&rsquo; which in this case is an instance of the string class, making it unnecessary to reference &lsquo;self&rsquo; in this method. Next, instead of using Ruby&rsquo;s reverse method, we can use the downto method. This is a less expensive operation since we can bypass the reversal process and simply tell ruby where to begin iterating in the reverse direction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">last_index_of</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">downto</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">return</span> <span class="n">i</span> <span class="k">if</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span><span class="p">}</span>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I incorporated these additional methods into my wrap function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">space_index</span> <span class="o">=</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">last_index_of</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">space_index</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">remainder_from</span><span class="p">(</span><span class="n">space_index</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">remainder_from</span><span class="p">(</span><span class="n">line_width</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">remainder_from</span><span class="p">(</span><span class="n">line_width</span><span class="p">),</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also added a final method to the String class to return a substring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">substring</span><span class="p">(</span><span class="n">start_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">end_index</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">[</span><span class="n">start_index</span><span class="o">.</span><span class="n">.end_index</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ruby&rsquo;s strip method</h3>

<p>Ruby has a handy method, &lsquo;strip,&rsquo; in the String class that will eliminate whitespace at the start and end of a string. I decided to take advantage of this and was able to eliminate the previous steps in the method that served this purpose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="n">substring</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">end_index</span> <span class="o">=</span> <span class="n">substring</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span> <span class="p">?</span> <span class="n">substring</span><span class="o">.</span><span class="n">last_index_of</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="p">:</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">substring</span><span class="p">(</span><span class="n">end_index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">rest_from</span><span class="p">(</span><span class="n">end_index</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Readability</h3>

<p>Another important concept to consider when refactoring is the code readability. Is the code readable? Will the code be easy to read if you look back at it in months from now? Someone who does not know how to program should be able to read your code and know what it is accomplishing. In this particular example, one way to make the code more readable is to add an additional method to the word wrap module that checks if a string contains a space character. The method should return a boolean value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_a_space?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Putting it all together</h3>

<p>Putting all of this together results in the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_index_of</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">downto</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">return</span> <span class="n">i</span> <span class="k">if</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span><span class="p">}</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rest_from</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">[</span><span class="n">index</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">substring</span><span class="p">(</span><span class="n">start_index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">end_index</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">[</span><span class="n">start_index</span><span class="o">.</span><span class="n">.end_index</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">WordWrap</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>    <span class="n">substring</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">substring</span><span class="p">(</span><span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">end_index</span> <span class="o">=</span> <span class="n">has_a_space?</span><span class="p">(</span><span class="n">substring</span><span class="p">)</span> <span class="p">?</span> <span class="n">substring</span><span class="o">.</span><span class="n">last_index_of</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="p">:</span> <span class="n">line_width</span>
</span><span class='line'>    <span class="n">string</span><span class="o">.</span><span class="n">substring</span><span class="p">(</span><span class="n">end_index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">rest_from</span><span class="p">(</span><span class="n">end_index</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_a_space?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My solution to this kata, including the tests, is available on my <a href="https://github.com/lisahamm/word_wrap_kata">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Word Wrap Kata in Ruby]]></title>
    <link href="http://lisahamm.github.io/blog/2015/02/12/word-wrap-kata-in-ruby/"/>
    <updated>2015-02-12T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/02/12/word-wrap-kata-in-ruby</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been working through the <a href="http://thecleancoder.blogspot.com/2010/10/craftsman-62-dark-path.html">Word Wrap Kata</a>, writing it in Ruby. Since <a href="http://thecleancoder.blogspot.com/2010/10/craftsman-62-dark-path.html">Uncle Bob&rsquo;s post</a> walks through the kata in Java, I thought I&rsquo;d write a post detailing an implementation in Ruby.</p>

<!--more-->


<h3>The General Concept</h3>

<p>The idea behind this kata is to write a method that will wrap a string of text according to a specified line length/width. The wrap method will take a string and line length as parameters. It must return the string with appropriate line breaks, ensuring no line is longer than the specified line length. The concept is similar to that of a word processor (i.e. Microsoft Word). Uncle Bob uses TDD to demonstrate the benefit of taking small steps when writing code. If the step you are trying to take in your code seems more like a leap, there is likely a simpler step that could (and should) be taken.</p>

<h3>The First Two Tests</h3>

<p>What is the simplest possible case the method must handle? An empty string and line length of zero. So our first test would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;does not wrap an empty string onto a newline&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to make this test pass, the wrap method must be created and just needs to return an empty string at this point:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building upon this, the method should also return an unaltered string when given a string shorter than the desired line length. The second test documents this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;does not wrap a string shorter than the line width onto a newline&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing the second test is straightforward: the method should simply return the string specified in its parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Going Down The Wrong Path</h3>

<p>The third test is where this kata really starts to get interesting. When coming up with the next simplest test here, you may find yourself going down the wrong path. To some, the obvious next test is for wrapping a two word string after the space. This test would likely be followed by wrapping a three word string after the first space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps a two word string after the space&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word</span><span class="se">\n</span><span class="s2">word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps a three word string after the first space&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word word&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word</span><span class="se">\n</span><span class="s2">word</span><span class="se">\n</span><span class="s2">word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once these two tests are passing, we know we can wrap a string at the first space, so it&rsquo;s time to move on to wrapping at the second space:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps a three word string after the first space&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word word&quot;</span><span class="p">,</span> <span class="mi">11</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word word</span><span class="se">\n</span><span class="s2">word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While it isn&rsquo;t very hard to pass the tests for wrapping a string at its first space, it&rsquo;s much more difficult to get the test for wrapping at the second space to pass. Even if you are confident you can figure out how to pass this last test, it&rsquo;s going to require you making a leap with your code. When you find yourself adding a lot of code at once, and perhaps, making guesses in your code, it is time to take a step back and look for something simpler to solve. As Uncle Bob quotes in his post, &ldquo;When faced with a problem you do not understand, do any part of it you do understand, then look at it again.&rdquo;</p>

<h3>Taking A Step Back</h3>

<p>Lets revisit the third test: wrapping a two word string after the space. Is there something else that could be tested at this point instead? Another case the method needs to handle is wrapping a one word string longer than the specified line length. Making this the third test case will end up leading us down a clearer path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps a string longer than the line length&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;wo</span><span class="se">\n</span><span class="s2">rd&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To pass this test, the method returns an unaltered string if its length is less than or equal to that of the specified line length, otherwise it will split the characters of the string with a newline at the line length boundary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building upon the previous step, the method must also wrap a one word string longer than two line lengths.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps a one word string longer than two line lengths&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;he</span><span class="se">\n</span><span class="s2">ll</span><span class="se">\n</span><span class="s2">o&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to handle wrapping a string onto a variable number of lines, we can add recursion into our method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Back to Dealing With Spaces</h3>

<p>The fifth test revisits the idea of wrapping a two word string on its word boundary (i.e. space character).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps on word boundary&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word</span><span class="se">\n</span><span class="s2">word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This requires an if-else statement to check for a space character at the line width, in which case it will skip over the space and create a newline.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next test documents the case of dealing with a line width value that occurs after the word boundary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps after word boundary&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word</span><span class="se">\n</span><span class="s2">word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to successfully handle this case, we need to find the last index of a space character in a substring of characters with a length equal to that of the specified line width. In Java, there is a handy lastIndexOf() method. Ruby does not have a built in method to do this, so we need to come up with a way to implement this ourselves. The Array#index method proves useful for this. This method returns the index of the first item in an array that is equal (==) to the method&rsquo;s argument. If no match is found, the method will return nil. Since this finds the first (not last) match, the string needs to be reversed and the index method can be called with the space character as its argument. Subtracting the result from the line width value will effectively give the last index value. This should be calculated for all substrings that return a value other than nil when the index method is called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">space_index</span> <span class="o">=</span> <span class="p">(</span><span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">reverse</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">space_index</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">space_index</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the cases of wrapping a string at and after the word boundary have been covered, it is time to think about cases of wrapping a string prior to a word boundary. The seventh test documents the method&rsquo;s ability to successfully wrap a string well before its word boundary. This test passes without writing any additional code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps well before word boundary&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;wor</span><span class="se">\n</span><span class="s2">d</span><span class="se">\n</span><span class="s2">wor</span><span class="se">\n</span><span class="s2">d&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>One Final Test</h3>

<p>The last case that needs to be dealt with is wrapping a string just prior to the word boundary (i.e. when the space occurs one character after the line width). The eighth and final test looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;wraps just before word boundary&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="no">WordWrap</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="s2">&quot;word word&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;word</span><span class="se">\n</span><span class="s2">word&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such a case is successfully dealt with by adding an &ldquo;elsif&rdquo; statement in our wrap method to check the character right after the specified line width.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span> <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="n">line_width</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">space_index</span> <span class="o">=</span> <span class="p">(</span><span class="n">line_width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">].</span><span class="n">reverse</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">space_index</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">space_index</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot; &quot;</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line_width</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">wrap</span><span class="p">(</span><span class="n">string</span><span class="o">[</span><span class="n">line_width</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">line_width</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wrapping Up (no pun intended)</h3>

<p>The wrap method is now fully functional. It still needs some refactoring, which I will walk through in my next blog post. I found this kata to be somewhat challenging at first, but it does a great job illustrating some important concepts. It allows the programmer to experience the benefits of Test Driven Development (TDD) by creating an opportunity to go down the wrong path with the code. In doing such, the programmer is able to experience firsthand what it feels like to write the wrong next test. This exercise taught me how much easier it is to write code in small steps as opposed to trying to solve the majority of the problem at once.</p>

<p>Ultimately, this kata really helped me learn the following: if you find yourself struggling to get a test to pass, there is a good chance you are trying to pass the wrong test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Solution to Project Euler Problem 12]]></title>
    <link href="http://lisahamm.github.io/blog/2015/02/02/optimizing-solution-to-project-euler-problem-12/"/>
    <updated>2015-02-02T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/02/02/optimizing-solution-to-project-euler-problem-12</id>
    <content type="html"><![CDATA[<p>While working on the Project Euler problems, I came across one (Problem 12) that was taking a very long time to compute. In this blog post, I will go through the initial steps I took to solve the problem, followed by the steps I took to optimize the solution.<!--more--> Problem 12 reads:</p>

<p>The sequence of triangular numbers is generated by adding the natural numbers. So the 7th triangular number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, &hellip;
Let us list the factors of the first seven triangular numbers:<br>
 1: 1<br>
 3: 1,3<br>
 6: 1,2,3,6<br>
10: 1,2,5,10<br>
15: 1,3,5,15<br>
21: 1,3,7,21<br>
28: 1,2,4,7,14,28<br>
We can see that 28 is the first triangular number to have over five divisors.
What is the value of the first triangular number to have over five hundred divisors?</p>

<h3>Getting Started</h3>

<p>In order to tackle the problem, I first wrote a method to calculate the number of divisors of a given number. If the parameter was 1, the method would return 1 as the number of divisors. For all other cases, the method would search through all numbers between 1 and half of the dividend to evaluate if the dividend was evenly divisible by any of the numbers in the range. Each number in the range that divided evenly into the dividend was thus counted as a factor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">number_of_divisors</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">integer</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">((</span><span class="mi">1</span><span class="o">.</span><span class="n">.integer</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">find_all</span> <span class="p">{</span><span class="o">|</span><span class="n">divisor</span><span class="o">|</span> <span class="n">integer</span> <span class="o">%</span> <span class="n">divisor</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span> <span class="o">+</span> <span class="o">[</span><span class="n">integer</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I needed a method to iterate over triangular numbers until it found one with over 500 divisors. The method would need to keep track of the current triangular number and the current index of the triangular number, as well as calculate each triangular number. The method would also need to evaluate the number of divisors for each triangular number and return the first triangular number with over 500 divisors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="n">desired_number_of_divisors</span><span class="p">)</span>
</span><span class='line'>  <span class="n">triangular_number</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">triangular_number</span> <span class="o">+=</span> <span class="n">index</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">triangular_number</span> <span class="k">if</span> <span class="n">number_of_divisors</span><span class="p">(</span><span class="n">triangular_number</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">desired_number_of_divisors</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I was using Test Driven Development to solve the problem, my tests for this method started out with small numbers of divisors and slowly incremented to larger numbers of divisors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;returns the first triangular number to have over 1 divisor&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;returns the first triangular number to have over 2 divisors&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">6</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;returns the first triangular number to have over 5 divisors&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">28</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;returns the first triangular number to have over 50 divisors&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="mi">50</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">25200</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;returns the first triangular number to have over 100 divisors&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">73920</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once all of the above tests were passing, I tested for the first triangular number to have over 200 divisors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;returns the first triangular number to have over 200 divisors&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="mi">200</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">2031120</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was the first test to take more than 2 seconds to run. In fact, it took around 2 minutes to run. When I finally attempted to calculate the answer to the problem (requiring the number of divisors to be upped to 500), I reached a standstill. The process ran for what seemed like an eternity (1345 minutes and 37 seconds to be exact, which is roughly 22.5 hours) before returning the correct answer.</p>

<h3>Optimization</h3>

<p>While the calculation was running, I began to try to optimize the algorithm. In order to figure out where the slowdown was occurring, I added code to print out triangular numbers each time the number of divisors incremented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">triangular_number_with_over_n_divisors</span><span class="p">(</span><span class="n">desired_number_of_divisors</span><span class="p">)</span>
</span><span class='line'>  <span class="n">triangular_number</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">divisors</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">triangular_number</span> <span class="o">+=</span> <span class="n">index</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number_of_divisors</span><span class="p">(</span><span class="n">triangular_number</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">divisors</span>
</span><span class='line'>      <span class="n">divisors</span> <span class="o">=</span> <span class="n">number_of_divisors</span><span class="p">(</span><span class="n">triangular_number</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;index: </span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">, triangular number: </span><span class="si">#{</span><span class="n">triangular_number</span><span class="si">}</span><span class="s2">,</span>
</span><span class='line'><span class="s2">      number of divisors: </span><span class="si">#{</span><span class="n">divisors</span><span class="si">}</span><span class="s2">, current time: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">triangular_number</span> <span class="k">if</span> <span class="n">number_of_divisors</span><span class="p">(</span><span class="n">triangular_number</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">desired_number_of_divisors</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this addition, I figured out the process was held up after the 5,984th triangular number, 17,907,120, which has a total of 480 divisors. At this point, I began to explore options for optimizing the algorithm. First, I decided to examine the code to pinpoint the lines that may have been major contributors to the lag time. This led me straight to the number_of_divisors method which was running through each number between 1 and ½ of the number to check if the dividend was evenly divisible by each. For a small number, this might not be such a problem, but for the larger numbers dealt with in this exercise, this results in having to repeatedly calculate the modulo for millions of divisors. The first triangular number with over 500 divisors is over 76 million. Using the current algorithm, over 38 million moduli would need to be calculated for just the last triangular number alone. Considering over 12,000 triangular numbers would need to be looped through before reaching the first one with over 500 divisors, this algorithm was significantly slowing down the run time. What could be done in order to optimize this? Could anything be done?</p>

<p>Thankfully, the answer is yes! There is a handy equation to calculate the number of factors of an integer using its prime factorization. Every integer, N, is the product of prime numbers. This can be expressed using exponential notation where N is an integer, x, y, and z are prime factors of N, and a, b, and c are integer powers of the primes:</p>

<p> N = x<sup>a</sup>  * y<sup>b</sup> * z<sup>c</sup> &hellip;</p>

<p>Since every integer is the product of powers of prime numbers, we can use the powers of a number’s primes to find the number of possible combinations. The following equation will give us the number of factors of an integer:
(a+1)(b+1)(c+1) &hellip;</p>

<p>Consider the following example:</p>

<p>N = 36<br>
36 has 9 factors = 1, 2, 3, 4, 6, 9, 12, 18, 36<br></p>

<p>Let’s break this number down into its prime factors:<br>
36 = 2 * 18<br>
36 = 2 * 2 * 9<br>
36 = 2 * 2 * 3 * 3<br></p>

<p>Now we can write the prime factorization of 36 in exponential notation:<br>
36 = 2<sup>2</sup> * 3<sup>2</sup></p>

<p>Using the equation from above ((a+1)(b+1)), we can calculate the number of factors of 36 without actually having to find all of the factors:</p>

<p>Number of factors = (2+1) * (2+1)<br>
Number of factors = 9</p>

<h3>Prime Factorization</h3>

<p>I needed to figure out an efficient way to find an integer’s prime factorization so I could utilize this equation for the purposes of this Project Euler problem. I decided to create a Prime Factors module that would include a method to implement this formula. I also watched a video of the <a href="http://vimeo.com/7762511">Prime Factors kata</a> to see how others have tackled this implementation. The Prime Factors module ended up containing the following methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">prime_factors_of</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prime_factors</span><span class="p">,</span> <span class="n">divisor</span> <span class="o">=</span> <span class="o">[]</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">integer</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">divisor</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">prime_factors</span> <span class="o">&lt;&lt;</span> <span class="n">divisor</span> <span class="ow">and</span> <span class="n">integer</span><span class="o">/=</span><span class="n">divisor</span> <span class="k">while</span> <span class="n">integer</span> <span class="o">%</span> <span class="n">divisor</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">divisor</span> <span class="o">=</span> <span class="n">integer</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">divisor</span> <span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">prime_factors</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">counts_of_prime_factors</span><span class="p">(</span><span class="n">prime_factors</span><span class="p">)</span>
</span><span class='line'>  <span class="n">prime_factors</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">prime_factor</span><span class="o">|</span> <span class="n">prime_factors</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">prime_factor</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once I incorporated the newly created module’s methods in the original number_of_divisors method, the speed of the calculation was dramatically improved. The answer to the problem was returned in under 2 seconds!  Here’s my updated method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">number_of_divisors</span><span class="p">(</span><span class="n">integer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">integer</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">counts_of_prime_factors</span><span class="p">(</span><span class="n">prime_factors_of</span><span class="p">(</span><span class="n">integer</span><span class="p">))</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">count</span><span class="o">|</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find my entire solution on my <a href="https://github.com/lisahamm/project_euler_tdd/blob/master/lib/problem_twelve.rb">github</a>.</p>

<h3>Lessons Learned</h3>

<p>Working through this problem taught me a lot. I learned about Big O Notation when my mentor helped me examine the order of the algorithms involved. I experienced firsthand how the order of an algorithm comes into play when working with numbers of a large magnitude.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Yield Keyword]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/22/rubys-yield-keyword/"/>
    <updated>2015-01-22T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/22/rubys-yield-keyword</id>
    <content type="html"><![CDATA[<p>This week I have been working on solving <a href="https://projecteuler.net/">Project Euler</a> problems with Ruby. Project Euler is a website containing mathematical problems that require a computer to solve them. Many of the problems have common themes such as identifying prime numbers or Fibonacci terms.<!--more--> My mentor recommended placing code pertaining to these common themes in modules so the code can be reused by including the module in the problems that require it.</p>

<p>One of the modules I created was for handling prime numbers. In order to do this, I had to read up on Ruby&rsquo;s &ldquo;yield&rdquo; keyword. The yield keyword invokes the block of code associated with the method in which it is being used. A simple implementation looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">three_times</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">three_times</span><span class="p">{</span><span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#produces:</span>
</span><span class='line'>
</span><span class='line'><span class="no">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="no">Hello</span> <span class="n">world</span>
</span><span class='line'><span class="no">Hello</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first method I implemented in my PrimeNumber module was a simple check to see if a given number is prime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">none?</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next method I implemented was where it got interesting: a method to return all prime numbers up to any given number.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime_numbers_up_to</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span>  <span class="mi">2</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">i</span> <span class="k">if</span> <span class="n">prime?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this method, the while loop begins running with an i value equal to the first prime number, 2. If the value of i is a prime value, the yield keyword will invoke whatever block is given along with the method. Once the associated block has been executed, the method will pick up right where it left off&ndash;incrementing i. The loop will continue repeating in this fashion until the value of i becomes greater than the value of the number given as a parameter. Pretty cool!</p>

<p>Similarly, I also wrote a method to return a specific number of prime numbers. This method keeps track of the number of prime numbers it has passed to its associated block and will stop running once this number equals the number passed in as a parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime_numbers_up_to_nth_term</span><span class="p">(</span><span class="n">nth_term</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">term_counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">term_counter</span> <span class="o">&lt;</span> <span class="n">nth_term</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prime?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>      <span class="n">term_counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was able to utilize this method in Project Euler&rsquo;s Problem 7, which reads:</p>

<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?</p>

<p>In order to solve this problem, I included the PrimeNumber module in my Problem 7 file, and passed 10001 in as the argument. The associated block stores the most recently received prime number, which the method then returns.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="no">PrimeNumber</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">nth_prime_number</span><span class="p">(</span><span class="n">nth_term</span><span class="p">)</span>
</span><span class='line'>  <span class="n">term</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="no">PrimeNumber</span><span class="o">.</span><span class="n">prime_numbers_up_to_nth_term</span><span class="p">(</span><span class="n">nth_term</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">term</span> <span class="o">=</span> <span class="n">n</span><span class="p">}</span>
</span><span class='line'>  <span class="n">term</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find my Project Euler solutions on my <a href="https://github.com/lisahamm/project_euler_tdd">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Code Kata: Practice for Programmers]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/15/the-code-kata-practice-for-programmers/"/>
    <updated>2015-01-15T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/15/the-code-kata-practice-for-programmers</id>
    <content type="html"><![CDATA[<p>I wrote a <a href="http://www.lisahamm.com/blog/2015/01/09/the-bowling-game-kata/">blog post</a> last week about my experience pairing with my mentor on the Bowling Game Kata. I have continued to work on this kata over the last week and now have more insight into why developers do these.<!--more--> The word “kata” is a Japanese word for “form.” A kata is a karate exercise that is continuously repeated with the intent of making little improvements with each repetition. This concept has been brought into the software development world and is commonly referred to as a Code Kata, which is essentially a practice session for the programmer. Just as an athlete must practice her sport and a musician must practice his instrument, a developer also needs to practice her craft. Each code kata is designed to be a short exercise of which is completed daily for two weeks. The daily practice is designed to ingrain patterns into one’s mind while honing development skills.</p>

<p>I’ve discovered firsthand that a code kata is also a great way for TDD (test driven development) newbies to get a feel for the process. In this post, I’ll go through the process of completing the Bowling Game Kata in Ruby. For a complete overview of the kata, visit <a href="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Uncle Bob’s website</a>.</p>

<p>Starting with the simplest case, the first test is written for scoring a gutter game:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a gutter game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bowling_game</span> <span class="o">=</span> <span class="no">BowlingGame</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec at this point results in a failing test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span>
</span><span class='line'>   <span class="ss">NoMethodError</span><span class="p">:</span>
</span><span class='line'>     <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`roll&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a failing unit test, we can abide by Uncle Bob&rsquo;s first Law of TDD, and write code to enable this test to pass. It is also important to remember the third law of TDD, which states, &ldquo;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec now results in a passing test, so we can move on to testing the next simplest case: a game in which the player knocks down one pin per roll.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a simple game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bowling_game</span> <span class="o">=</span> <span class="no">BowlingGame</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">1</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">20</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, running this test results in a failure since the code is not currently storing a running total of pins knocked down. Adding the following code will allow this test to pass. Keep in mind, sticking to the rules of TDD requires one to only add enough code to result in a passing test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@total</span> <span class="o">+=</span> <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="vi">@total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that both of the tests are passing, it&rsquo;s time for some refactoring. Cleaning up your code and removing code smells is an important process that should be done once your original code is working. By using TDD, the functionality of our code is well documented by our tests. This means we don&rsquo;t have worry that refactoring may or may not break our program. We will know immediately if this is the case when we run our tests after making a change.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:bowling_game</span><span class="p">)</span> <span class="p">{</span><span class="no">BowlingGame</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll_many</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a gutter game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a simple game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">20</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next text case is for scoring a game with a spare in it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a game with a spare&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">29</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to score a game with a spare, we will now need a variable to keep track of the number of pins knocked down in each roll. The player will receive 10 points plus the number of pins knocked down during the first roll of the subsequent frame. Since this next step is more of a leap, I am going to refactor the current code further incorporating the spare test. For now, I will place an &lsquo;x&rsquo; at the beginning of the test, which will tell rspec to ignore it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">xit</span> <span class="s2">&quot;can score a game with a spare&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">29</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the BowlingGame class, the @total instance variable can be replaced with another instance variable, @rolls, that is set to equal an empty array. An attr_reader for this variable can also be added to the class. In the roll method, we can add the number of pins knocked down on each roll to the new rolls array. Additionally, now the score method can be refactored to actually implement the scoring.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:rolls</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">&lt;&lt;</span> <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After checking to make sure the tests pass at this point, it&rsquo;s time to bring back the spare test by removing the &lsquo;x&rsquo; placed at its beginning.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a game with a spare&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">29</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order for this test to pass, the score method needs to check if the pins knocked down in each frame total 10. A while loop can run through each frame by using an index variable to access each roll and then increment its value by 2 so as to move to the next frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:rolls</span>
</span><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="n">pins_down</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@rolls</span> <span class="o">&lt;&lt;</span> <span class="n">pins_down</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rolls</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that all of our tests pass, we move on to test the case of scoring a game with a strike.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a game with a strike&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="n">roll_many</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">30</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running rspec and watching this test fail, the score method is modified to account for the case of a strike - when 10 pins are knocked down on the first roll of a frame. Here, the index variable must only increment by a value of 1 in order to move to the next frame (since there is only one roll in a frame with a strike).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rolls</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec at this point will show all of our tests currently pass. Since we are in the green, it is a good point to consider refactoring the code. We can add clearly named methods to check for a strike and a spare. We can also add methods to return the bonus points a player earns when scoring both a strike and a spare, and also the sum of the points earned in a frame without a strike or spare.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rolls</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">strike?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">strike_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">spare?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">spare_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">sum_of_balls_in_frame</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strike?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">spare?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strike_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">spare_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_of_balls_in_frame</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">rolls</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These explicitly named methods facilitate reading and understanding of the code with ease for anyone who may try to digest it. Following this idea, the spec file can also be refactored to include methods for rolling a spare and rolling a strike.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">roll_spare</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">5</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll_strike</span>
</span><span class='line'>  <span class="n">bowling_game</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After completing this refactoring, it is now time to tackle the last test case: a perfect game of bowling. This consists of 12 strikes and results in a score of 300 points.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;can score a perfect game&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="mi">12</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="n">roll_strike</span><span class="p">}</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">300</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running rspec now results in the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="n">expect</span><span class="p">(</span><span class="n">bowling_game</span><span class="o">.</span><span class="n">score</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">300</span>
</span><span class='line'><span class="ss">TypeError</span><span class="p">:</span>
</span><span class='line'>  <span class="kp">nil</span> <span class="n">can</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">be</span> <span class="n">coerced</span> <span class="n">into</span> <span class="no">Fixnum</span>
</span></code></pre></td></tr></table></div></figure>


<p>This error message is a common one&ndash;it occurs when trying to access an item of an array with an index that reaches further than the length of an array (this results in a nil value). In order to make this test pass, the score method needs a variable to keep track of the frame number. The while loop within this method needs to execute while the frame number is less than 10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">frame</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">strike?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">strike_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">spare?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">spare_bonus</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">sum_of_balls_in_frame</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the complete kata on my <a href="https://github.com/lisahamm/bowling_game_kata">github</a>. After completing this kata over and over again, I am happy to report that I can now do it in close to 10 minutes and my overall agility on the keyboard has improved immensely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Keyboard Shortcuts]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/13/useful-keyboard-shortcuts/"/>
    <updated>2015-01-13T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/13/useful-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>I’ve been working on improving the time it takes me to complete the Bowling Game Kata. One thing that has been helpful with this is learning keyboard shortcuts that facilitate easy movement throughout the text editor.<!--more--> I am currently coding in Sublime Text 2 on a MacBook. I found <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/keyboard_shortcuts_osx.html">this webpage</a> that lists several shortcuts. So far, the most useful have been:</p>

<p>-<strong>Command + Option + left or right arrow key</strong> to move from one open file to the next</p>

<p>-<strong>Command + Tab</strong> which allows you to move into another application running (this makes it easy to switch between Sublime and the Terminal)</p>

<p>-<strong>Command + Enter</strong> creates a new line (and you don’t have to be at the end of the line to utilize this)</p>

<p>-<strong>Shift + left or right arrow key</strong> will select text character by character</p>

<p>-<strong>Shift + Command + right/left arrow key</strong> will select text from cursor to end of the line</p>

<p>-<strong>Command + L</strong> selects entire line</p>

<p>-<strong>Ctrl + Command + G</strong> to find and select all cases of a word/character (this is useful if you want to change the name of either a variable or a method that appears several times in your text)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Bowling Game Kata]]></title>
    <link href="http://lisahamm.github.io/blog/2015/01/09/the-bowling-game-kata/"/>
    <updated>2015-01-09T00:00:00-06:00</updated>
    <id>http://lisahamm.github.io/blog/2015/01/09/the-bowling-game-kata</id>
    <content type="html"><![CDATA[<p>Yesterday I sat down with my 8th Light mentor, Doug, and paired on the <a href="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Bowling Game Kata</a> and wrote it in Ruby. The general concept is to write a program capable of scoring a game of bowling and to use test driven development (TDD) in order to do so. <!--more-->A game of bowling is made up of 10 frames in which a player has two opportunities to knock down 10 pins. The player earns a score equal to the number of pins knocked down in each frame, but also has the opportunity to earn additional points for a spare (whatever is earned in the next roll is added to the 10 points in the frame) and a strike (points earned from the following two rolls are added to the 10 points in the frame).</p>

<p>Before attempting this kata, I had tried to learn the ropes of TDD on my own, but was having a hard time getting a feel for writing tests for “the next easiest thing.” While pairing with Doug, we went over the <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">Three Rules of TDD</a> which were extremely helpful to me in clarifying the process. The first rule is not to write any production code unless it is to make a failing test pass. The second rule is not to write any more of a test than is sufficient to fail. The third rule is not to write any more production code than is necessary to pass the one failing test.</p>

<p>We started with writing a test for the simplest case of a bowling game–one in which a player rolls all gutter balls. This case would result in a score of zero. After running the test and watching it fail, we added just enough production code to make it pass. The next test was for a simple game of bowling in which a player knocks down one pin each roll. The outcome of this game would be a score of 20. Once again, we ran the test, watched it fail, and added just enough production code to make it pass. We continued along like this for the case of a spare in the first frame, a strike in the first frame, and finally for the cases of a spare and strike in the tenth frame. Along the way, we did some refactoring, but only after we confirmed all tests written up to that point were passing. After finishing the kata with Doug, I felt I had such a better grasp on how to implement TDD and also learned how awesome it is. The simplicity of the code we wrote compared to what I written on my own (without using TDD) was quite a beautiful thing.</p>

<p>After we finished, Doug deleted the program and said it would be a good idea to repeat the kata over and over until I can complete it about 10 minutes. I am a huge believer in “practice makes perfect” and also had a lot of fun with this kata, so I’m excited to keeping working on it until I can meet the 10 minute goal.</p>
]]></content>
  </entry>
  
</feed>
